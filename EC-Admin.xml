<?xml version="1.0" encoding="UTF-8"?>
<exportedData xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="commander.xsd" version="61" buildLabel="build_main_56612_2012.12.14_04:41:42" buildVersion="4.2.0.56612" passkey="a30cbf89cfdae202c5227ce40fe867512295566d">
  <exportPath>/projects/EC-Admin</exportPath>
  <project>
    <projectName>EC-Admin</projectName>
    <description>A set of tools to help with the administration of a Commander Server</description>
    <resourceName></resourceName>
    <workspaceName></workspaceName>
    <propertySheet>
      <property>
        <propertyName>perlInvokeCommander</propertyName>
        <description>Perl Libraries for:&#10; - InvokeCommander: Run an ElectricCommander function using the Perl API&#10;&#10;#-------------------------------------------------------------------------&#10;#  Run an ElectricCommander function using the Perl API&#10;#&#10;#  Params&#10;#       optionFlags - "AllowLog" or "SuppressLog" or "SuppressResult"&#10;#                     combined with "IgnoreError"&#10;#       commanderFunction&#10;#       Variable Parameters&#10;#           The parameters required by the ElectricCommander function&#10;#           according to the Perl API. See the ElectricCommander&#10;#           Help system for more information.&#10;#               (the functions and paramenter are based on "ectool" - run it for documentation)&#10;#&#10;#  Returns&#10;#       success     - 1 if no error was detected&#10;#       xPath       - an XML::XPath object with the result.&#10;#       errMsg      - a message string extracted from Commander on error&#10;#&#10;#-------------------------------------------------------------------------</description>
        <expandable>1</expandable>
        <value>sub InvokeCommander {&#10;&#10;    my $optionFlags = shift;&#10;    my $commanderFunction = shift;&#10;    my $xPath;&#10;    my $success = 1;&#10;&#10;    my $bSuppressLog = $optionFlags =~ /SuppressLog/i;&#10;    my $bSuppressResult = $bSuppressLog || $optionFlags =~ /SuppressResult/i;&#10;    my $bIgnoreError = $optionFlags =~ /IgnoreError/i;&#10;&#10;    #  Run the command&#10;    # print "Request to Commander: $commanderFunction\n" unless ($bSuppressLog);&#10;&#10;    $ec-&gt;abortOnError(0) if $bIgnoreError;&#10;    $xPath = $ec-&gt;$commanderFunction(@_);&#10;    $ec-&gt;abortOnError(1) if $bIgnoreError;&#10;&#10;    # Check for error return&#10;    my $errMsg = $ec-&gt;checkAllErrors($xPath);&#10;    if ($errMsg ne "") {&#10;&#10;        $success = 0;&#10;    }&#10;    if ($xPath) {&#10;&#10;        print "Return data from Commander:\n" .&#10;               $xPath-&gt;findnodes_as_string("/") . "\n"&#10;            unless $bSuppressResult;&#10;    }&#10;&#10;    # Return the result&#10;    return ($success, $xPath, $errMsg);&#10;}</value>
      </property>
    </propertySheet>
    <credential>
      <credentialName>adminLogin</credentialName>
      <description></description>
      <password>/DHePBz5RUcyoG7IRp4eyQ==</password>
      <userName>admin</userName>
      <propertySheet>
      </propertySheet>
    </credential>
    <procedure>
      <procedureName>artifactsCleanup</procedureName>
      <description>Delete Artifacts and clean caches&#10;</description>
      <jobNameTemplate>artifact-cleanup-$[jobId]</jobNameTemplate>
      <resourceName></resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <workspaceName></workspaceName>
      <propertySheet>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <propertySheet>
            <property>
              <propertyName>parameters</propertyName>
              <propertySheet>
                <property>
                  <propertyName>adminLogin</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>artifactProperty</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>executeDeletion</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>checkedValue</propertyName>
                      <expandable>1</expandable>
                      <value>true</value>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                    <property>
                      <propertyName>initiallyChecked</propertyName>
                      <expandable>1</expandable>
                      <value>0</value>
                    </property>
                    <property>
                      <propertyName>uncheckedValue</propertyName>
                      <expandable>1</expandable>
                      <value>false</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>olderThan</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>artifactProperty</formalParameterName>
        <defaultValue>doNotDelete</defaultValue>
        <description>Name of a property attached to your artifactVersions. If this property is set, your artifactVersions won't be deleted no matter how old it is.&#10;</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>executeDeletion</formalParameterName>
        <defaultValue>false</defaultValue>
        <description>If this option is not set, only report is done. No real data are deleted</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>checkbox</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>olderThan</formalParameterName>
        <defaultValue>90</defaultValue>
        <description>Indicate the numbers of days after which artifactVersions should be deleted</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>entry</type>
      </formalParameter>
      <step>
        <stepName>deleteArtifactVersions</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#############################################################################&#10;#&#10;#  deleteArtifactVersions -- Script to delete artifacts and caches&#10;#  Copyright 2013 Electric-Cloud Inc.&#10;#&#10;#############################################################################&#10;&#10;use strict;&#10;&#10;use ElectricCommander;&#10;use DateTime;&#10;$| = 1;&#10;&#10;# Create a single instance of the Perl access to ElectricCommander&#10;my $ec = new ElectricCommander();&#10;&#10;#############################################################################&#10;#&#10;#  Assign Commander parameters to variables&#10;#&#10;#############################################################################&#10;my $artifactProperty = "$[artifactProperty]";&#10;my $timeLimit = $[olderThan];&#10;my $executeDeletion= "$[executeDeletion]";&#10;&#10;#############################################################################&#10;#&#10;#  Global Variables&#10;#&#10;#############################################################################&#10;&#10;#############################################################################&#10;#&#10;#  Main&#10;#&#10;#############################################################################&#10;&#10;printf("%s artifacts older than $timeLimit days (%s).\n", &#10;    $executeDeletion eq "true"?"Deleting":"Reporting", &#10;    calculateDate($timeLimit));&#10;&#10;my ($success, $xPath) = InvokeCommander("SuppressLog", "findObjects", &#10;										"artifact", {sort =&gt; [ {propertyName =&gt; "groupId",&#10;                                                    order =&gt; "ascending"} ]});&#10;# Loop over artifacts&#10;my $nodeset = $xPath-&gt;find('//artifact');&#10;foreach my $node ($nodeset-&gt;get_nodelist) {&#10;	my $artifactName=$xPath-&gt;findvalue('artifactName', $node);&#10;	printf("%s\n", $artifactName);&#10;&#10;	# create filterList&#10;	my @filterList;&#10;	push (@filterList, {"propertyName" =&gt; 'artifactName',&#10;                    "operator" =&gt; "equals",&#10;                    "operand1" =&gt; $artifactName});&#10;	push (@filterList, {"propertyName" =&gt; "createTime",&#10; 	                    "operator" =&gt; "lessThan",&#10; 	                  	"operand1" =&gt; calculateDate($timeLimit)});&#10;	push (@filterList, {"propertyName" =&gt; $artifactProperty,&#10;                    "operator" =&gt; "isNull"});&#10;	my ($success, $xPath) = InvokeCommander("SuppressLog", "findObjects", &#10;											"artifactVersion",&#10;					 						{'filter' =&gt; \@filterList});&#10;	my $versionset = $xPath-&gt;findnodes('//artifactVersion');&#10;	foreach my $version ($versionset-&gt;get_nodelist) {&#10;		#print $version-&gt;findnodes_as_string("/") . "\n";&#10;		my $versionNumber=$version-&gt;findvalue('./artifactVersionName', $node);&#10;		if ($executeDeletion eq "true") {&#10;			 my ($success, $xPath) = InvokeCommander("SuppressLog", "deleteArtifactVersion", &#10;                      $versionNumber);&#10;			printf("\tDeleting %s\n", $versionNumber);&#10;		} else {&#10;			printf("\t%s\n", $versionNumber);&#10;		}&#10;&#10;	}	&#10;	printf("\n");&#10;}&#10;#############################################################################&#10;#&#10;#  Calculate the size of the workspace directory&#10;#&#10;#############################################################################&#10;sub getDirSize {&#10;  my $dir  = shift;&#10;  my $size = 0;&#10;&#10;  opendir(D,"$dir") || return 0;&#10;  foreach my $dirContent (grep(!/^\.\.?/,readdir(D))) {&#10;     my $st=stat("$dir/$dirContent");&#10;     if (S_ISREG($st-&gt;mode)) {&#10;       $size += $st-&gt;size;&#10;     } elsif (S_ISDIR($st-&gt;mode)) {&#10;       $size += getDirSize("$dir/$dirContent");&#10;     }&#10;  }&#10;  closedir(D);&#10;  return $size;&#10;}&#10;&#10;#############################################################################&#10;#&#10;#  Calculate the Date based on now and the number of days required by&#10;#  the user before deleting jobs&#10;#&#10;#############################################################################&#10;sub calculateDate {&#10;    my $nbDays=shift;&#10;    return DateTime-&gt;now()-&gt;subtract(days =&gt; $nbDays)-&gt;iso8601() . ".000Z";&#10;}&#10;&#10;&#10;#############################################################################&#10;#&#10;#  Return human readable size&#10;#&#10;#############################################################################&#10;sub humanSize {&#10;  my $size = shift();&#10;&#10;  if ($size &gt; 1099511627776) {    #   TB: 1024 GB&#10;      return sprintf("%.2f TB", $size / 1099511627776);&#10;  }&#10;  if ($size &gt; 1073741824) {       #   GB: 1024 MB&#10;      return sprintf("%.2f GB", $size / 1073741824);&#10;  }&#10;  if ($size &gt; 1048576) {          #   MB: 1024 KB&#10;      return sprintf("%.2f MB", $size / 1048576);&#10;  }&#10;  elsif ($size &gt; 1024) {          #   KiB: 1024 B&#10;      return sprintf("%.2f KB", $size / 1024);&#10;  }&#10;                                  #   bytes&#10;  return "$size byte" . ($size &lt;= 1 ? "" : "s");&#10;}&#10;&#10;&#10;#-------------------------------------------------------------------------&#10;#  Run an ElectricCommander function using the Perl API&#10;#&#10;#  Params&#10;#       optionFlags - "AllowLog" or "SuppressLog" or "SuppressResult"&#10;#                     combined with "IgnoreError"&#10;#       commanderFunction&#10;#       Variable Parameters&#10;#           The parameters required by the ElectricCommander function&#10;#           according to the Perl API. See the ElectricCommander&#10;#           Help system for more information.&#10;#               (the functions and paramenter are based on "ectool" - run it for documentation)&#10;#&#10;#  Returns&#10;#       success     - 1 if no error was detected&#10;#       xPath       - an XML::XPath object with the result.&#10;#       errMsg      - a message string extracted from Commander on error&#10;#&#10;#-------------------------------------------------------------------------&#10;sub InvokeCommander {&#10;&#10;    my $optionFlags = shift;&#10;    my $commanderFunction = shift;&#10;    my $xPath;&#10;    my $success = 1;&#10;&#10;    my $bSuppressLog = $optionFlags =~ /SuppressLog/i;&#10;    my $bSuppressResult = $bSuppressLog || $optionFlags =~ /SuppressResult/i;&#10;    my $bIgnoreError = $optionFlags =~ /IgnoreError/i;&#10;&#10;    #  Run the command&#10;    # print "Request to Commander: $commanderFunction\n" unless ($bSuppressLog);&#10;&#10;    $ec-&gt;abortOnError(0) if $bIgnoreError;&#10;    $xPath = $ec-&gt;$commanderFunction(@_);&#10;    $ec-&gt;abortOnError(1) if $bIgnoreError;&#10;&#10;    # Check for error return&#10;    my $errMsg = $ec-&gt;checkAllErrors($xPath);&#10;    if ($errMsg ne "") {&#10;&#10;        $success = 0;&#10;    }&#10;    if ($xPath) {&#10;&#10;        print "Return data from Commander:\n" .&#10;               $xPath-&gt;findnodes_as_string("/") . "\n"&#10;            unless $bSuppressResult;&#10;    }&#10;&#10;    # Return the result&#10;    return ($success, $xPath, $errMsg);&#10;}</command>
        <condition></condition>
        <description>Script to delete old Artifact Versions</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>createDynamicCleanRepoProcedure</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#############################################################################&#10;#&#10;#  Copyright 2013 Electric-Cloud Inc.&#10;#&#10;#############################################################################&#10;use strict;&#10;&#10;use ElectricCommander;&#10;use DateTime;&#10;$| = 1;&#10;&#10;# Create a single instance of the Perl access to ElectricCommander&#10;my $ec = new ElectricCommander();&#10;&#10;#############################################################################&#10;#&#10;#  Assign Commander parameters to variables&#10;#&#10;#############################################################################&#10;my $executeDeletion="$[executeDeletion]";&#10;&#10;my $jobId = $[jobId];&#10;my $projectName = '$[/myProject/projectName]';&#10;my $procedureName = "cleanRepositoryProcedure_$jobId";&#10;&#10;$ec-&gt;createProcedure($projectName, $procedureName);&#10;$ec-&gt;setProperty("/myJob/cleanRepoProcName", $procedureName);&#10;&#10;my ($success, $xPath) = InvokeCommander("SuppressLog", "getRepositories");&#10;my $nodeset = $xPath-&gt;find('//repository');&#10;&#10;foreach my $node ($nodeset-&gt;get_nodelist) {&#10;  my $repoName=$node-&gt;findvalue('repositoryName');&#10;  my $repoServerName = $node-&gt;findvalue('url');&#10;  &#10;  $repoServerName =~ s#https?://(\w+)(:\d+)?#$1#;&#10;  my $stepName = "cleanStepFor".$repoName;&#10;  $ec-&gt;createStep($projectName, $procedureName, $stepName, &#10;                  {'subprocedure' =&gt; 'cleanupRepository', &#10;#                   'credentialName' =&gt; 'adminLogin',&#10;                   'actualParameter' =&gt; [{'actualParameterName' =&gt; 'executeDeletion', 'value'=&gt;$executeDeletion},&#10;                                         {'actualParameterName' =&gt; 'resource', 'value'=&gt;$repoServerName},&#10;#                                         {'actualParameterName' =&gt; 'adminLogin', value=&gt;'adminLogin'}&#10;                                        ]&#10;                  });&#10;}                      &#10;&#10;#&#10;# Perl library code&#10;$[/myProject/perlInvokeCommander]&#10;&#10;</command>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>dynamicProcedureCleanRepository</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <subprocedure>$[cleanRepoProcName]</subprocedure>
        <subproject>EC-Admin</subproject>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>createDynamicCacheCleaningProcedure</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#############################################################################&#10;#&#10;#  Copyright 2013 Electric-Cloud Inc.&#10;#&#10;#############################################################################&#10;use strict;&#10;&#10;use ElectricCommander;&#10;use DateTime;&#10;$| = 1;&#10;&#10;# Create a single instance of the Perl access to ElectricCommander&#10;my $ec = new ElectricCommander();&#10;&#10;#############################################################################&#10;#&#10;#  Assign Commander parameters to variables&#10;#&#10;#############################################################################&#10;my $executeDeletion="$[executeDeletion]";&#10;my $days=$[olderThan];&#10;&#10;my $jobId = $[jobId];&#10;my $projectName = '$[/myProject/projectName]';&#10;my $procedureName = "cleanArtCacheProcedure_$jobId";&#10;&#10;$ec-&gt;createProcedure($projectName, $procedureName);&#10;$ec-&gt;setProperty("/myJob/cleanArtCacheProcName", $procedureName);&#10;&#10;my ($success, $xPath) = InvokeCommander("SuppressLog", "getResources");&#10;my $nodeset = $xPath-&gt;find('//resource');&#10;&#10;foreach my $node ($nodeset-&gt;get_nodelist) {&#10;  my $resName=$node-&gt;findvalue('resourceName');&#10;  my $resDisabled=$node-&gt;findvalue('resourceDisabled');&#10;  my $agentAlive=$node-&gt;findvalue('agentState/alive');&#10;  printf("%s\n\t Disabled: %s\n\t alive: %s\n", $resName, $resDisabled, $agentAlive);&#10;&#10;  #&#10;  # Create a sub-step only if agent is alive and not disabled&#10;  # to avoid to have to wait (and fail) for unavailable resources&#10;  if ( ($resDisabled eq "0") &amp;&amp; ($agentAlive eq "1")) {&#10;    my $resName=$node-&gt;findvalue('resourceName');&#10;    my $stepName = "cleanArtCacheStepFor".$resName;&#10;    $ec-&gt;createStep($projectName, $procedureName, $stepName, &#10;                  {'subprocedure' =&gt; 'cleanupCacheDirectory', &#10;                   'actualParameter' =&gt; [{'actualParameterName'=&gt;'executeDeletion', 'value'=&gt;$executeDeletion},&#10;                                         {'actualParameterName'=&gt;'olderThan', 'value'=&gt;$days},&#10;                                         {'actualParameterName'=&gt;'resource', 'value'=&gt;$resName}]&#10;                  });&#10;  }&#10;}                      &#10;&#10;#&#10;# Perl library code&#10;$[/myProject/perlInvokeCommander]&#10;</command>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>cleanArtifactCache</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <subprocedure>$[cleanArtCacheProcName]</subprocedure>
        <subproject>EC-Admin</subproject>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>deletDynamicProcedures</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>use strict;&#10;use ElectricCommander;&#10;&#10;$| = 1; # Turn off output buffering.&#10;&#10;my $projectName = "$[/myProject/projectName]"; &#10;&#10;my $procedureName = "$[/myJob/cleanRepoProcName]"; &#10;print `ectool deleteProcedure "$projectName" "$procedureName"`;  &#10;&#10;my $procedureName = "$[/myJob/cleanArtCacheProcName]"; &#10;print `ectool deleteProcedure "$projectName" "$procedureName"`;  &#10;</command>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>cleanupCacheDirectory</procedureName>
      <description>Clear out all stale artifacts from a given artifact cache.&#10;Can be called manually on 1 resource or automatically on all</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName>$[resource]</resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <workspaceName></workspaceName>
      <propertySheet>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <propertySheet>
            <property>
              <propertyName>parameters</propertyName>
              <propertySheet>
                <property>
                  <propertyName>executeDeletion</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>checkedValue</propertyName>
                      <expandable>1</expandable>
                      <value>true</value>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                    <property>
                      <propertyName>initiallyChecked</propertyName>
                      <expandable>1</expandable>
                      <value>0</value>
                    </property>
                    <property>
                      <propertyName>uncheckedValue</propertyName>
                      <expandable>1</expandable>
                      <value>false</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>olderThan</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>resource</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>executeDeletion</formalParameterName>
        <defaultValue>false</defaultValue>
        <description>If this option is not set, only report is done. No real data are deleted</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>checkbox</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>olderThan</formalParameterName>
        <defaultValue>90</defaultValue>
        <description></description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>resource</formalParameterName>
        <defaultValue></defaultValue>
        <description>The resource on which to run this job. The agent running on this resource must have access to the specified artifact cache directory. Note that if no artifact cache directory is specified, the job will cleanup the default artifact cache used by the resource.</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>entry</type>
      </formalParameter>
      <step>
        <stepName>clearInvalidArtifactVersions</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>use strict;&#10;use ElectricCommander;&#10;&#10;$| = 1; # Turn off output buffering.&#10;&#10;# Create a single instance of the Perl access to ElectricCommander&#10;my $ec = new ElectricCommander();&#10;&#10;#############################################################################&#10;#&#10;#  Assign Commander parameters to variables&#10;#&#10;#############################################################################&#10;my $executeDeletion= "$[executeDeletion]";&#10;&#10;# We're going to try and find a valid cache directory. Mark the directory as invalid for now&#10;# and update it only once we find and validate the directory.&#10;$ec-&gt;setProperty("/myJob/cacheDirectoryIsValid", {value =&gt; 0});&#10;&#10;# Check the environment variable COMMANDER_ARTIFACT_CACHE.&#10;my $cacheEnv = "COMMANDER_ARTIFACT_CACHE";&#10;my $dir;&#10;if (defined($ENV{$cacheEnv})) {&#10;    $dir = $ENV{$cacheEnv};&#10;    print "Cache directory found in environment: \"$dir\".\n";&#10;} else {&#10;    # We came up empty; give up since we don't know what directory to cleanup.&#10;    die "ERROR: No cache directory was found in the environment.\n";&#10;}&#10;&#10;if (! -d $dir) {&#10;    # The directory can't be read; no need to try to clean it up.&#10;    die "ERROR: Cannot access directory \"$dir\".\n";&#10;}&#10;&#10;$ec-&gt;setProperty("/myJob/actualCacheDirectory", {value =&gt; $dir});&#10;$ec-&gt;setProperty("/myJob/cacheDirectoryIsValid", {value =&gt; 1});&#10;if ($executeDeletion eq "true") {&#10;    print "Cleaning up artifact cache.\n";&#10;    $ec-&gt;cleanupArtifactCache($dir);&#10;} else {&#10;    print "Would call cleanupArtifactCache on \"$dir\".\n";&#10;}</command>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>traverseCacheDirectory</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>use strict;&#10;&#10;use ElectricCommander;&#10;use ElectricCommander::Batch;&#10;use Data::Dumper;&#10;&#10;$| = 1; # Turn off output buffering.&#10;&#10;my $ec = new ElectricCommander();&#10;&#10;sub getContents($) {&#10;    my ($dir) = @_;&#10;    opendir(DIR, $dir) or die "ERROR: Couldn't open directory \"$dir\".\n";&#10;    my @contents = readdir(DIR);&#10;    closedir(DIR);&#10;    return @contents;&#10;}&#10;&#10;# Keep track of whether we found any candidates for time or space based deletion.&#10;$ec-&gt;setProperty("/myJob/candidatesForDeletion", {value =&gt; 0});&#10;&#10;# Get the value of the actualCacheDirectory property.&#10;my $cache = $ec-&gt;getProperty("actualCacheDirectory")-&gt;findvalue("//value");&#10;&#10;# Create a new parallel batch of getArtifactVersion requests. Use parallel mode&#10;# because we need to allow non-existent artifact versions, and single mode will&#10;# have a cascaded failure at the first error it encounters.&#10;my $gavBatch = $ec-&gt;newBatch('parallel');&#10;&#10;# Create a map of GAV =&gt; requestId so we can get the appropriate response and&#10;# store the needed data.&#10;my %gavMap = ();&#10;&#10;foreach my $g (getContents($cache)) {&#10;    # First level = (g)roup&#10;    if ($g eq "." || $g eq ".." || ! -d "$cache/$g") {&#10;        next;&#10;    } else {&#10;        foreach my $a (getContents("$cache/$g")) {&#10;            # Second level = (a)rtifact&#10;            if ($a eq "." || $a eq ".." || ! -d "$cache/$g/$a") {&#10;                next;&#10;            } else {&#10;                foreach my $v (getContents("$cache/$g/$a")) {&#10;                    # Third level = (v)ersion&#10;                    if ($v eq "." || $v eq ".." || ! -d "$cache/$g/$a/$v") {&#10;                        next;&#10;                    } else {&#10;                        # Check to see if "g:a:v" is an artifact version.&#10;                        my $gav = "$g:$a:$v";&#10;                        print "Potential artifact version: $gav\n";&#10;                        my $reqId = $gavBatch-&gt;getArtifactVersion($gav,&#10;                            {&#10;                                includeRetrieverJobSteps =&gt; 1,&#10;                                maxRetrievers =&gt; 1&#10;                            }&#10;                        );&#10;                        $gavMap{$gav} = $reqId;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;if (keys %gavMap == 0) {&#10;    print "No potential GAV directories were found in \"$cache\".\n";&#10;    exit 0;&#10;}&#10;&#10;# Allow "no such aritfact version" errors.&#10;$ec-&gt;abortOnError(0);&#10;$gavBatch-&gt;submit();&#10;$ec-&gt;abortOnError(1);&#10;&#10;# Create a new parallel batch of getProperty requests.&#10;my $stepBatch = $ec-&gt;newBatch('single');&#10;&#10;foreach my $gav (keys %gavMap) {&#10;    my $reqId = $gavMap{$gav};&#10;    my $jobStepId = $gavBatch-&gt;findvalue($reqId, "artifactVersion/retriever/jobStepId")-&gt;string_value;&#10;    if ($jobStepId ne "") {&#10;        print "Artifact version \"$gav\" was last retrieved by job step $jobStepId.\n";&#10;        my $reqId = $stepBatch-&gt;getProperty("/jobSteps/$jobStepId/start");&#10;        $gavMap{$gav} = $reqId;&#10;    } else {&#10;        # Remove this artifact version from our map if no job step id was found,&#10;        # which would happen if the artifact was never retrieved in a job context.&#10;        delete $gavMap{$gav};&#10;    }&#10;}&#10;&#10;if (keys %gavMap == 0) {&#10;    print "No potential GAV directories were retrieved by job steps.\n";&#10;    exit 0;&#10;}&#10;&#10;$stepBatch-&gt;submit();&#10;&#10;# Get the start times for the last job step to access each artifact version and store&#10;# the artifact version =&gt; last access time in a property sheet on the job for future&#10;# steps to consume.&#10;foreach my $gav (keys %gavMap) {&#10;    my $reqId = $gavMap{$gav};&#10;    my $start = $stepBatch-&gt;findvalue($reqId, "property/value")-&gt;string_value;&#10;    $ec-&gt;setProperty("/myJob/validArtifactVersions/$gav", {value =&gt; $start});&#10;}&#10;&#10;$ec-&gt;setProperty("/myJob/candidatesForDeletion", {value =&gt; 1});</command>
        <condition>$[/javascript myJob.cacheDirectoryIsValid == '1']</condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
      </step>
      <step>
        <stepName>timeBaseDeletion</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>use strict;&#10;use ElectricCommander;&#10;use ElectricCommander::Batch;&#10;use File::Path;&#10;use Time::Local;&#10;&#10;$| = 1; # Turn off output buffering.&#10;&#10;# Create a single instance of the Perl access to ElectricCommander&#10;my $ec = new ElectricCommander();&#10;&#10;#############################################################################&#10;#&#10;#  Assign Commander parameters to variables&#10;#&#10;#############################################################################&#10;my $days=$[olderThan];&#10;my $executeDeletion="$[executeDeletion]";&#10;&#10;# Get the value of the actualCacheDirectory property.&#10;my $cache = $ec-&gt;getProperty("actualCacheDirectory")-&gt;findvalue("//value");&#10;&#10;# Create a new parallel batch of deleteProperty requests for all artifact versions&#10;# that we are blowing away, so the /myJob/validArtifactVersions property sheet is&#10;# up to date for future steps that consume it.&#10;my $deleteBatch = $ec-&gt;newBatch('parallel');&#10;&#10;# Figure out the time limit for deletion based on the number of days specified.&#10;&#10;my ($sec, $min, $hour, $mday, $mon, $year) = gmtime(time() - (3600*24*$days));&#10;my $timeLimit = sprintf("%4d%02d%02d%02d%02d%02d", 1900+$year,&#10;                      $mon+1, $mday, $hour, $min, $sec);&#10;print "Time limit for deletion: $timeLimit\n";&#10;&#10;# Get the properties stored in /myJob/validArtifactVersions so we can go through&#10;# each one to figure out if we should delete it.&#10;my $validVersions = $ec-&gt;getProperties({path =&gt; "/myJob/validArtifactVersions"});&#10;&#10;foreach my $validVersion($validVersions-&gt;findnodes("//property")) {&#10;    my $accessTime = $validVersion-&gt;findvalue("value")-&gt;string_value;&#10;    $accessTime =~ s/[^.\d]//g;&#10;    if ($accessTime &lt; $timeLimit) {&#10;        my $gav = $validVersion-&gt;findvalue("propertyName")-&gt;string_value;&#10;        $gav =~ m/(.*):(.*):(.*)/;&#10;        my $dir = "$cache/$1/$2/$3";&#10;        if ($executeDeletion eq "true") {&#10;            print "Deleting \"$dir\" (last accessed $accessTime).\n";&#10;            rmtree($dir);&#10;        } else {&#10;           print "Would delete \"$dir\" (last accessed $accessTime).\n";&#10;        }&#10;    }&#10;}&#10;</command>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>cleanupRepository</procedureName>
      <description>Clear out all stale artifacts from a repository's backing store.&#10;This procedure can be run on an individual repository or can be called on all repositories by "Artifact Cleanup"</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName>$[resource]</resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <workspaceName></workspaceName>
      <propertySheet>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <propertySheet>
            <property>
              <propertyName>parameters</propertyName>
              <propertySheet>
                <property>
                  <propertyName>adminLogin</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>executeDeletion</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>checkedValue</propertyName>
                      <expandable>1</expandable>
                      <value>true</value>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                    <property>
                      <propertyName>initiallyChecked</propertyName>
                      <expandable>1</expandable>
                      <value>0</value>
                    </property>
                    <property>
                      <propertyName>uncheckedValue</propertyName>
                      <expandable>1</expandable>
                      <value>false</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>resource</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>executeDeletion</formalParameterName>
        <defaultValue>false</defaultValue>
        <description>If this option is not set, only report is done. No real data are deleted</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>checkbox</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>resource</formalParameterName>
        <defaultValue>local</defaultValue>
        <description>The resource on which to run this job. This resource must be running on the same machine as a repository server. The job will detect the repository's backing store location based on the assumption that the resource is installed along with the repository.</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>entry</type>
      </formalParameter>
      <step>
        <stepName>clearInvalidArtifactVersions</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>use strict;&#10;use warnings;&#10;use ElectricCommander;&#10;use File::Spec;&#10;&#10;$| = 1; # Turn off output buffering.&#10;&#10;my $ec = new ElectricCommander();&#10;my $executeDeletion="$[executeDeletion]";&#10;my $response;&#10;&#10;my $dataEnv = "COMMANDER_DATA";&#10;my $dataDir;&#10;&#10;# Check for OS Type&#10;my $osIsWindows = $^O =~ /MSWin/;&#10;&#10;if (defined($ENV{$dataEnv})) {&#10;    $dataDir = $ENV{$dataEnv};&#10;    print "Data directory found in environment: \"$dataDir\".\n";&#10;} else {&#10;    # No data directory in the environment; probably a pre-4.0 agent.&#10;    die "ERROR: No data directory was found in the environment.\n";&#10;}&#10;&#10;if (! -d $dataDir) {&#10;    # The data directory is invalid.&#10;    die "ERROR: Cannot access data directory \"$dataDir\".\n";&#10;}&#10;&#10;my $propsFile = "$dataDir/conf/repository/server.properties";&#10;if (! -f $propsFile) {&#10;    # There's no repository server.properties.&#10;    die "ERROR: Cannot find repository configuration file \"$propsFile\".\n";&#10;}&#10;&#10;open PROPS, $propsFile or die "Could not open repository configuration file \"$propsFile\": $!";&#10;binmode PROPS;&#10;my $propsContents = join("", &lt;PROPS&gt;);&#10;close PROPS;&#10;$propsContents =~ m/REPOSITORY_BACKING_STORE=([^\n]*)/;&#10;my $backingStore = $1;&#10;&#10;if (!defined($backingStore) || $backingStore eq "") {&#10;    # Invalid backing store.&#10;    die "ERROR: Cannot find backing store in repository configuration file \"$propsFile\".\n";&#10;}&#10;&#10;# If the backing store isn't an absolute path, it is relative to the data directory.&#10;if (!File::Spec-&gt;file_name_is_absolute($backingStore)) {&#10;    $backingStore = "$dataDir/$backingStore";&#10;}&#10;&#10;if (! -d $backingStore) {&#10;    # The backing store directory is invalid.&#10;    die "ERROR: Cannot access backing store directory \"$backingStore\".\n";&#10;}&#10;&#10;if ($executeDeletion eq "true") {&#10;    # Get Admin user/password from project-level credential&#10;    # getFullCredential will not reveal the contents of the "password" field&#10;    my $xPath = $ec-&gt;getFullCredential("adminLogin");&#10;    my $user = $xPath-&gt;findvalue("//userName");&#10;    my $passwd = $xPath-&gt;findvalue("//password");&#10;&#10;    print "Cleaning up repository backing store \"$backingStore\".\n";&#10;    $ec-&gt;login($user, $passwd);&#10;    $ec-&gt;cleanupRepository($backingStore);&#10;} else {&#10;    print "Would call cleanupRepository on \"$backingStore\".\n";&#10;}</command>
        <condition></condition>
        <description>Check the environment variable COMMANDER_DATA, then check for a repository server.properties relative to this directory. Error out if the properties file can't be found, otherwise parse it for the backing store location. Once we have the backing store, call cleanupRepository on that directory.</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName>$[resource]</resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
        <attachedCredentials>
          <credentialName>adminLogin</credentialName>
        </attachedCredentials>
      </step>
    </procedure>
    <procedure>
      <procedureName>jobsCleanup</procedureName>
      <description> Delete jobs older than a number of days, along with the associated workspace.&#10;Report number of jobs and dis space</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName>local</resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <workspaceName></workspaceName>
      <propertySheet>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <propertySheet>
            <property>
              <propertyName>parameters</propertyName>
              <propertySheet>
                <property>
                  <propertyName>delete Aborted Jobs</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>checkedValue</propertyName>
                      <expandable>1</expandable>
                      <value>true</value>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                    <property>
                      <propertyName>initiallyChecked</propertyName>
                      <expandable>1</expandable>
                      <value>1</value>
                    </property>
                    <property>
                      <propertyName>uncheckedValue</propertyName>
                      <expandable>1</expandable>
                      <value>false</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>delete Error Jobs</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>checkedValue</propertyName>
                      <expandable>1</expandable>
                      <value>true</value>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                    <property>
                      <propertyName>initiallyChecked</propertyName>
                      <expandable>1</expandable>
                      <value>1</value>
                    </property>
                    <property>
                      <propertyName>uncheckedValue</propertyName>
                      <expandable>1</expandable>
                      <value>false</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>delete Successful Jobs</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>checkedValue</propertyName>
                      <expandable>1</expandable>
                      <value>true</value>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                    <property>
                      <propertyName>initiallyChecked</propertyName>
                      <expandable>1</expandable>
                      <value>0</value>
                    </property>
                    <property>
                      <propertyName>uncheckedValue</propertyName>
                      <expandable>1</expandable>
                      <value>false</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>deleteAbortedJobs</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>checkedValue</propertyName>
                      <expandable>1</expandable>
                      <value>true</value>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                    <property>
                      <propertyName>initiallyChecked</propertyName>
                      <expandable>1</expandable>
                      <value>1</value>
                    </property>
                    <property>
                      <propertyName>uncheckedValue</propertyName>
                      <expandable>1</expandable>
                      <value>false</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>executeDeletion</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>checkedValue</propertyName>
                      <expandable>1</expandable>
                      <value>true</value>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                    <property>
                      <propertyName>initiallyChecked</propertyName>
                      <expandable>1</expandable>
                      <value>0</value>
                    </property>
                    <property>
                      <propertyName>uncheckedValue</propertyName>
                      <expandable>1</expandable>
                      <value>false</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>jobProperty</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>olderThan</propertyName>
                  <propertySheet>
                    <property>
                      <propertyName>options</propertyName>
                      <propertySheet>
                        <property>
                          <propertyName>option1</propertyName>
                          <propertySheet>
                            <property>
                              <propertyName>text</propertyName>
                              <expandable>1</expandable>
                              <value>1 month</value>
                            </property>
                            <property>
                              <propertyName>value</propertyName>
                              <expandable>1</expandable>
                              <value>30</value>
                            </property>
                          </propertySheet>
                        </property>
                        <property>
                          <propertyName>option2</propertyName>
                          <propertySheet>
                            <property>
                              <propertyName>text</propertyName>
                              <expandable>1</expandable>
                              <value>2 months</value>
                            </property>
                            <property>
                              <propertyName>value</propertyName>
                              <expandable>1</expandable>
                              <value>60</value>
                            </property>
                          </propertySheet>
                        </property>
                        <property>
                          <propertyName>option3</propertyName>
                          <propertySheet>
                            <property>
                              <propertyName>text</propertyName>
                              <expandable>1</expandable>
                              <value>3 months</value>
                            </property>
                            <property>
                              <propertyName>value</propertyName>
                              <expandable>1</expandable>
                              <value>91</value>
                            </property>
                          </propertySheet>
                        </property>
                        <property>
                          <propertyName>option4</propertyName>
                          <propertySheet>
                            <property>
                              <propertyName>text</propertyName>
                              <expandable>1</expandable>
                              <value>6 months</value>
                            </property>
                            <property>
                              <propertyName>value</propertyName>
                              <expandable>1</expandable>
                              <value>182</value>
                            </property>
                          </propertySheet>
                        </property>
                        <property>
                          <propertyName>option5</propertyName>
                          <propertySheet>
                            <property>
                              <propertyName>text</propertyName>
                              <expandable>1</expandable>
                              <value>1 year</value>
                            </property>
                            <property>
                              <propertyName>value</propertyName>
                              <expandable>1</expandable>
                              <value>365</value>
                            </property>
                          </propertySheet>
                        </property>
                        <property>
                          <propertyName>optionCount</propertyName>
                          <expandable>1</expandable>
                          <value>5</value>
                        </property>
                        <property>
                          <propertyName>type</propertyName>
                          <expandable>1</expandable>
                          <value>list</value>
                        </property>
                      </propertySheet>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>delete Error Jobs</formalParameterName>
        <defaultValue>true</defaultValue>
        <description>if checked, delete jobs that finished in error</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <type>checkbox</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>delete Successful Jobs</formalParameterName>
        <defaultValue>false</defaultValue>
        <description>if checked, delete jobs that finished successfully.</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <type>checkbox</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>deleteAbortedJobs</formalParameterName>
        <defaultValue>true</defaultValue>
        <description>If checked, delete aborted jobs</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <type>checkbox</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>executeDeletion</formalParameterName>
        <defaultValue>false</defaultValue>
        <description>If this option is not set, only report is done. No real data are deleted</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>checkbox</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>jobProperty</formalParameterName>
        <defaultValue>doNotDelete</defaultValue>
        <description>Name of a property attached to your jobs. If this property is set, your job won't be deleted no matter how old it is.&#10;</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>olderThan</formalParameterName>
        <defaultValue>91</defaultValue>
        <description>Indicate the numbers of days after which jobs should be deleted</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <type>select</type>
      </formalParameter>
      <step>
        <stepName>deleteJobs</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#############################################################################&#10;#&#10;#  deleteJobs -- Script to delete jobs and workspaces&#10;#  Copyright 2013 Electric-Cloud Inc.&#10;#&#10;#############################################################################&#10;&#10;use strict;&#10;&#10;use ElectricCommander;&#10;use File::Path;&#10;use File::stat;&#10;use Fcntl ':mode';&#10;use DateTime;&#10;$| = 1;&#10;&#10;# Create a single instance of the Perl access to ElectricCommander&#10;my $ec = new ElectricCommander();&#10;&#10;#############################################################################&#10;#&#10;#  Assign Commander parameters to variables&#10;#&#10;#############################################################################&#10;my $jobProperty     = "$[jobProperty]";&#10;my $timeLimit       =  $[olderThan];&#10;my $executeDeletion = "$[executeDeletion]";&#10;&#10;#############################################################################&#10;#&#10;#  Global Variables&#10;#&#10;#############################################################################&#10;my $version="0.0.1";&#10;my $totalWksSize=0;          # Size of workspace files&#10;my $totalNbJobs=0;           # Number of jobs to delete potentially&#10;my $totalNbSteps=0;          # Number of steps to evaluate DB size&#10;my $DBStepSize=10240;        # Step is about 10K in DB&#10;&#10;#############################################################################&#10;#&#10;#  Main&#10;#&#10;#############################################################################&#10;&#10;printf("%s jobs older than $timeLimit days (%s).\n", &#10;    $executeDeletion eq "true"?"Deleting":"Reporting", &#10;    calculateDate($timeLimit));&#10;&#10;# create filterList&#10;my @filterList;&#10;push (@filterList, {"propertyName" =&gt; "status",&#10;                    "operator" =&gt; "equals",&#10;                    "operand1" =&gt; "completed"});&#10;push (@filterList, {"propertyName" =&gt; "finish",&#10;                    "operator" =&gt; "lessThan",&#10;                    "operand1" =&gt; calculateDate($timeLimit)});&#10;push (@filterList, {"propertyName" =&gt; $jobProperty,&#10;                    "operator" =&gt; "isNull"});&#10;&#10;my ($success, $xPath) = InvokeCommander("SuppressLog", "findObjects", "job",&#10;                                        {maxIds =&gt; 0,&#10;                                         filter =&gt; \@filterList ,&#10;                                         sort =&gt; [ {propertyName =&gt; "finish",&#10;                                                    order =&gt; "ascending"} ]});&#10;&#10;print "Search Status:\t$success\n";&#10;&#10;# Check for the OS Type&#10;my $osIsWindows = $^O =~ /MSWin/;&#10;&#10;# Loop over all returned jobs&#10;my $nodeset = $xPath-&gt;find('//job');&#10;foreach my $node ($nodeset-&gt;get_nodelist) {&#10;        $totalNbJobs++;&#10;        my $wksSize;&#10;&#10;        my $jobId = $xPath-&gt;findvalue('jobId', $node);&#10;        my $jobName = $xPath-&gt;findvalue('jobName', $node);&#10;&#10;        print "Job: $jobName\n";&#10;&#10;        #&#10;        # Find number of steps for the jobs&#10;        my ($success, $xPath) = InvokeCommander("SuppressLog", "findJobSteps", &#10;                      {'jobId' =&gt; $jobId});&#10;        my $nbSteps=scalar($xPath-&gt;findnodes('//object')-&gt;get_nodelist);&#10;        $totalNbSteps += $nbSteps;&#10;        printf("  Job steps: \t\t%d\n", $nbSteps);&#10;&#10;        #  Find the workspaces (there may be more than one if some steps&#10;        #  were configured to use a different workspace)&#10;        my ($success, $xPath) = InvokeCommander("SuppressLog", "getJobInfo",&#10;                                                 $jobId);&#10;        my $wsNodeset = $xPath-&gt;find('//job/workspace');&#10;        foreach my $wsNode ($wsNodeset-&gt;get_nodelist) {&#10;            my $workspace;&#10;            if ($osIsWindows) {&#10;                $workspace = $xPath-&gt;findvalue('./winUNC', $wsNode);&#10;                $workspace =~ s'/'\\'g;&#10;            } else {&#10;                $workspace = $xPath-&gt;findvalue('./unix', $wsNode);&#10;            }&#10;&#10;            print "  Workspace: \t\t$workspace\n" if ($workspace ne "");&#10;&#10;            # Delete the workspace (after checking its name as a sanity test)&#10;            # look for "job_nnn" or "Procedure-nnn"&#10;            if ($workspace =~ /[-_][\d]+$/) {&#10;                use File::Path;&#10;&#10;                $wksSize = getDirSize($workspace);&#10;                printf ("    Size: \t\t%s\n", humanSize($wksSize));&#10;                $totalWksSize += $wksSize;&#10;                if ($executeDeletion eq "true") {&#10;                    rmtree ([$workspace])  ;&#10;                    print "    Deleting Workspace\n";&#10;                }&#10;            }&#10;        }&#10;&#10;        # Delete the job&#10;&#10;        if ($executeDeletion eq "true") {&#10;            InvokeCommander("SuppressLog", "deleteJob", $jobId) ;&#10;            print "  Deleting Job\n\n";&#10;        } &#10;}&#10;&#10;printf("SUMMARY\n");&#10;printf("Total number of jobs:  %d\n", $totalNbJobs);&#10;printf("Total File size:       %s\n", humanSize($totalWksSize));&#10;printf("Total number of steps: %d\n", $totalNbSteps);&#10;printf("Total Database size:   %s\n", humanSize($totalNbSteps * $DBStepSize));&#10;&#10;$ec-&gt;setProperty("/myJob/numberOfJobs", $totalNbJobs);&#10;$ec-&gt;setProperty("/myJob/diskSpace", $totalWksSize);&#10;$ec-&gt;setProperty("/myJob/numbernumberOfSteps", $totalNbSteps);&#10;&#10;exit(0);&#10;&#10;&#10;#############################################################################&#10;#&#10;#  Calculate the Date based on now and the number of days required by&#10;#  the user before deleting jobs&#10;#&#10;#############################################################################&#10;sub calculateDate {&#10;    my $nbDays=shift;&#10;    return DateTime-&gt;now()-&gt;subtract(days =&gt; $nbDays)-&gt;iso8601() . ".000Z";&#10;}&#10;&#10;&#10;#############################################################################&#10;#&#10;#  Calculate the size of the workspace directory&#10;#&#10;#############################################################################&#10;sub getDirSize {&#10;  my $dir  = shift;&#10;  my $size = 0;&#10;&#10;  opendir(D,"$dir") || return 0;&#10;  foreach my $dirContent (grep(!/^\.\.?/,readdir(D))) {&#10;     my $st=stat("$dir/$dirContent");&#10;     if (S_ISREG($st-&gt;mode)) {&#10;       $size += $st-&gt;size;&#10;     } elsif (S_ISDIR($st-&gt;mode)) {&#10;       $size += getDirSize("$dir/$dirContent");&#10;     }&#10;  }&#10;  closedir(D);&#10;  return $size;&#10;}&#10;&#10;&#10;#############################################################################&#10;#&#10;#  Return human readable size&#10;#&#10;#############################################################################&#10;sub humanSize {&#10;  my $size = shift();&#10;&#10;  if ($size &gt; 1099511627776) {    #   TB: 1024 GB&#10;      return sprintf("%.2f TB", $size / 1099511627776);&#10;  }&#10;  if ($size &gt; 1073741824) {       #   GB: 1024 MB&#10;      return sprintf("%.2f GB", $size / 1073741824);&#10;  }&#10;  if ($size &gt; 1048576) {          #   MB: 1024 KB&#10;      return sprintf("%.2f MB", $size / 1048576);&#10;  }&#10;  elsif ($size &gt; 1024) {          #   KiB: 1024 B&#10;      return sprintf("%.2f KB", $size / 1024);&#10;  }&#10;                                  #   bytes&#10;  return "$size byte" . ($size &lt;= 1 ? "" : "s");&#10;}&#10;&#10;&#10;#&#10;# Perl library code&#10;$[/myProject/perlInvokeCommander]&#10;</command>
        <condition></condition>
        <description>Script to delete jobs and workspaces</description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
        </propertySheet>
      </step>
    </procedure>
    <schedule>
      <scheduleName>CleanJobs</scheduleName>
      <beginDate></beginDate>
      <description>A Schedule to automatically delete jobs older than 90 days</description>
      <endDate></endDate>
      <interval>0</interval>
      <intervalUnits>seconds</intervalUnits>
      <misfirePolicy>runOnce</misfirePolicy>
      <monthDays></monthDays>
      <priority>normal</priority>
      <procedureName>Job Cleanup</procedureName>
      <scheduleDisabled>0</scheduleDisabled>
      <startTime>2:00</startTime>
      <stopTime></stopTime>
      <timeZone>America/Los_Angeles</timeZone>
      <weekDays></weekDays>
      <actualParameters>
        <property>
          <propertyName>executeDeletion</propertyName>
          <expandable>1</expandable>
          <value>true</value>
        </property>
        <property>
          <propertyName>jobProperty</propertyName>
          <expandable>1</expandable>
          <value>doNotDeleteThisJob</value>
        </property>
        <property>
          <propertyName>olderThan</propertyName>
          <expandable>1</expandable>
          <value>90</value>
        </property>
      </actualParameters>
      <propertySheet>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <propertySheet>
            <property>
              <propertyName>formType</propertyName>
              <expandable>1</expandable>
              <value>standard</value>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
    </schedule>
  </project>
</exportedData>
