#############################################################################
#
# Compare 2 version number strings like x.y.z... section by section
# return 1 if V1 > v2
# return 0 if v1 == v2
# return -1 if v1 < v2
#
#############################################################################
sub compareVersion {

  my ($v1, $v2)=@_;
  
  my @v1Numbers = split('\.', $v1);
  my @v2Numbers = split('\.', $v2);

  for (my $index = 0; $index < scalar(@v1Numbers); $index++) {
    
    # We ran out of V2 numbers => V1 is a bigger version
    return 1 if (scalar(@v2Numbers) == $index);

    # same value, go to next number
    next if ($v1Numbers[$index] == $v2Numbers[$index]);
        
    # V1 is a bigger version
    return 1 if ($v1Numbers[$index] > $v2Numbers[$index]);
           ;
    # V2 is a bigger version
    return -1;
  }

  # We ran out of V1 numbers
  return -1 if(scalar(@v1Numbers) != scalar(@v2Numbers));

  # Same number
  return 0;
}


#############################################################################
#
# Return property value or undef in case of error (non existing)
#
#############################################################################
sub getP
{
  my $prop=shift;

  my($success, $xPath, $errMsg, $errCode)= InvokeCommander("SuppressLog IgnoreError", "getProperty", $prop);
  return undef if ($success != 1);
  my $val= $xPath->findvalue("//value");
  return($val);
}

#############################################################################
#
# Return human readable size
#
#############################################################################
sub humanSize {
  my $size = shift();

  if ($size > 1099511627776) { # TB: 1024 GB
      return sprintf("%.2f TB", $size / 1099511627776);
  }
  if ($size > 1073741824) { # GB: 1024 MB
      return sprintf("%.2f GB", $size / 1073741824);
  }
  if ($size > 1048576) { # MB: 1024 KB
      return sprintf("%.2f MB", $size / 1048576);
  }
  elsif ($size > 1024) { # KiB: 1024 B
      return sprintf("%.2f KB", $size / 1024);
  }
                                  # bytes
  return "$size byte" . ($size <= 1 ? "" : "s");
}
