$[/javascript 
var p;
if (typeof(plugins["EC-Admin"].project.Version) == "undefined") {
  p=projects["EC-Admin"].scripts.perlCommonLib;
} else {
  p=plugins["EC-Admin"].project.scripts.perlCommonLib;
}
p;
];

#############################################################################
#
# Invoke a API call
#
#############################################################################
sub InvokeCommander {

    my $optionFlags = shift;
    my $commanderFunction = shift;
    my $xPath;
    my $success = 1;

    my $bSuppressLog = $optionFlags =~ /SuppressLog/i;
    my $bSuppressResult = $bSuppressLog || $optionFlags =~ /SuppressResult/i;
    my $bIgnoreError = $optionFlags =~ /IgnoreError/i;

    # Run the command
    # print "Request to Commander: $commanderFunction\n" unless ($bSuppressLog);

    $ec->abortOnError(0) if $bIgnoreError;
    $xPath = $ec->$commanderFunction(@_);
    $ec->abortOnError(1) if $bIgnoreError;

    # Check for error return
    my $errMsg = $ec->checkAllErrors($xPath);
    my $errCode=$xPath->findvalue('//code',)->value();
    if ($errMsg ne "") {
        $success = 0;
    }
    if ($xPath) {
        print "Return data from Commander:\n" .
               $xPath->findnodes_as_string("/") . "\n"
            unless $bSuppressResult;
    }

    # Return the result
    return ($success, $xPath, $errMsg, $errCode);
}


#############################################################################
#
# Return a hash of the properties contained in a Property Sheet.
# Args:
#    1. Property Sheet path
#    2. Recursive boolean
#############################################################################
sub getPS
{
  my $psPath=shift;
  my $recursive=shift;
  
  my $hashRef=undef;
  
  my($success, $result, $errMsg, $errCode)=InvokeCommander("SuppressLog IgnoreError", "getProperties", {'path'=>$psPath});
  return $hashRef if (!$success);
  
 my $nodeset=$result->find('//property');
  foreach my $node ($nodeset->get_nodelist) {
	my $propName=$result->findvalue('propertyName',    $node);
    my $value   =$result->findvalue('value',           $node);
    my $psId    =$result->findvalue('propertySheetId', $node);
    
    # this is not a nested PS    
    if ($psId eq '') {
      $hashRef->{$propName}=$value;
    } else {
      # nested PropertySheet
      if ($recursive) {
        $hashRef->{$propName}=getPS("$psPath/$propName", $recursive);
      } else {
        $hashRef->{$propName}=undef;
      }  
    }
  }
  return $hashRef;
}
