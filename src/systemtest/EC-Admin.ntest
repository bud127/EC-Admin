# -*-Perl-*-

# EC-Admin.ntest -
#
# Exercise basic components of EC-Admin plugin
#
# Copyright (c) 2014 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECTest;

initCommander();
$::N=$adminSession;

my $pluginKey = "EC-Admin";
my $xpath = $::N->getPlugin($pluginKey);
my $pluginName = $xpath->findvalue("//pluginName")->value;


#-------------------------------------------------------------------------------
# Test permissions and visibility, which should be set regardless of whether the
# plugin is promoted or not.
#-------------------------------------------------------------------------------
ntest "install", {}, sub {
    # Start out with the demoted plugin
    assertOK($::N->promotePlugin($pluginName, {promoted => 0}));

};

#-------------------------------------------------------------------------------
# Test promote & demote behavior.
#-------------------------------------------------------------------------------
ntest "promote", {}, sub {
    # Start out with the demoted plugin
    assertOK($::N->promotePlugin($pluginName, {promoted => 0}));
    
    # Make sure the plugin's ec_setup script exists
    assertOK($xpath = $::N->getProperty("/projects/$pluginName/ec_setup",
                                      {expand => 0}),
             "ec_setup property exists");
    assertNe("", $xpath->findvalue("//value")->value, 
             "ec_setup script not empty");

    # Promote the plugin
    assertOK($::N->promotePlugin($pluginName));

    # Demote the plugin
    assertOK($::N->promotePlugin($pluginName, {promoted => 0}));

};

# Ensure the plugin is promoted for later tests
$::N->promotePlugin($pluginName);

#-------------------------------------------------------------------------------
# Test procedure present.
#-------------------------------------------------------------------------------
ntest "performanceMetrics", {}, sub {
	assertOK($::N->getProcedure($pluginName, "performanceMetrics"), "procedure missing");
};

ntest "jobsCleanup", {}, sub {
        assertOK($::N->getProcedure($pluginName, "jobsCleanup"), "procedure missing");
};

#-------------------------------------------------------------------------------
# Test for scripts/properties
#-------------------------------------------------------------------------------
ntest "scripts_perlCommonLib", {}, sub {
    my $xpath = $::N->runProcedure("EC-Admin_Test", {
        procedureName=>"scriptsPropertiesTest",
      });
    assertOK($xpath, "run scriptsPropertiesTest");
    assertDef($xpath, "Procedure scriptsPropertiesTest timed out"); 

    if ($xpath) {
        # get new job ID
        my $jobId  = $xpath->findvalue("//jobId");
        waitForJob($jobId);

        my $jobData  = $::N->getJobDetails($jobId);
        my $exitCode = $jobData->findvalue("//job/jobStep[stepName='humanSize']/exitCode");
        my $result   = $jobData->findvalue("//job/jobStep[stepName='humanSize']/result");
        
        # testing result=1 Mb and exitCode=0
        assertEq($result, "1 Mb", "test scriptPropertiesTest returned wrong value $result instead of 1Mb");
        assert($exitCode, "==", 0,  "test scriptPropertiesTest failed");
    }
};

1;
