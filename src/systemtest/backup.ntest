# -*-Perl-*-

# backup.ntest -
#
# check the saveAllObjects procedure of EC-Admin plugin
#
# Copyright (c) 2015 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use File::Path;
use ECTest;

initCommander();
$::N=$adminSession;

my $pluginKey = "EC-Admin";
my $xpath = $::N->getPlugin($pluginKey);
my $pluginName = $xpath->findvalue("//pluginName")->value;

#-------------------------------------------------------------------------------
# Test procedure present.
#-------------------------------------------------------------------------------
ntest "checkProcedures", {}, sub {
    assertOK($::N->getProcedure($pluginName, "saveAllObjects"), "procedure saveAllObjects missing");
    assertOK($::N->getProcedure($pluginName, "saveProjects"), "procedure saveProjects is missing");
};

#-------------------------------------------------------------------------------
#  check default resource is local
#-------------------------------------------------------------------------------
ntest "local_resource", {}, sub {

  # check for resource
  my $res=$::N->getProperty("resourceName",
               {
		  projectName   => $pluginName,
		  procedureName => 'saveAllObjects',
		  stepName      => 'grabResource'
		})->findvalue("//value");
  assertEq("local", $res, "Resource must be \"local\"");
};

#-------------------------------------------------------------------------------
#  Issue 63: filter pattern
#-------------------------------------------------------------------------------
ntest "issue 63 patern", {}, sub {
  my $proj="456GHTVF123";
  my $xpath=$::N->createProject($proj);
  assertOK($xpath, "Failed to create project $proj");

  $xpath = $::N->runProcedure("EC-Admin", {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>"/tmp/BACKUP"},
      {actualParameterName=>"pattern", value=>"GHTVF"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check only 1 project was exported
    my $nb=$::N->getProperty("projectExported" , {jobId => $jobId})->findvalue("//value");
    assertEq(1, $nb, "incorrect number of project exported");
   
    # clean
    rmtree("/tmp/BACKUP");
    $::N->deleteProject($proj);
  }

};


#-------------------------------------------------------------------------------
# Issue 56: Check for question mark
#       57: group name with "/"
#       58: backup gateway
#       59: backup zones
#-------------------------------------------------------------------------------
ntest "issues 56, 57, 58 and 59", {}, sub {

  my $error=0;

  # issue 57: group name with '/'
  my $group="AC/DC";
  my $xpath= $::N->createGroup($group);
  assertOK($xpath, "Failed to create group $group for issue 57");

  # issue 58: backup gateway
  my $gate="GW58";
  $xpath= $::N->createGateway($gate, {
     gatewayDisabled => 0,
     description => "forbackup testing",
     resourceName1 => "local", resourceName2 => "win7"
    });
  assertOK($xpath, "Failed to create gateway $gate");

  # issue 59: backup zones
  my $zone="zone59";
  $xpath= $::N->createZone($zone, {description => "for backup testing"});
  assertOK($xpath, "Failed to create zone $zone");

  rmtree("/tmp/BACKUP");
  $xpath = $::N->runProcedure("EC-Admin", {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>"/tmp/BACKUP"},
      {actualParameterName=>"pattern", value=>""},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"true"},
      {actualParameterName=>"exportZones", value=>"true"},
      {actualParameterName=>"exportGroups", value=>"true"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # issue 56: check for file with question mark replaced by _
    if (! -f "/tmp/BACKUP/Projects/EC-Admin_Test/Procedures/questionMark/Steps/rerun_.xml") {
      fail("rerun_.xml is missing");
      $error=1;
    }

    # issue 57: check for group file with / mark replaced by _
    if (! -f "/tmp/BACKUP/Groups/AC_DC.xml") {
      fail("AC_DC.xml group is missing");
      $error=1;
    }

    # issue 58: check for gateway file
    if (! -f "/tmp/BACKUP/Gateways/$gate.xml") {
      fail("$gate.xml gate is missing");
      $error=1;
    }
    # issue 59: check for zone file
    if (! -f "/tmp/BACKUP/Zones/$zone.xml") {
      fail("$zone.xml zone is missing");
      $error=1;
    }
    # Clean
    if ($error == 0) {
      rmtree("/tmp/BACKUP");
      $::N->deleteGroup($group);
      $::N->deleteGateway($gate);
      $::N->deleteZone($zone);
    }
  }
};

1;
