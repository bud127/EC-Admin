# -*-Perl-*-

# cleanup.ntest -
#
# check the cleanup procedures of EC-Admin plugin
#
# Copyright (c) 2015 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECTest;

initCommander();
$::N=$adminSession;

my $pluginKey = "EC-Admin";
my $xpath = $::N->getPlugin($pluginKey);
my $pluginName = $xpath->findvalue("//pluginName")->value;

#-------------------------------------------------------------------------------
# Test procedure present.
#-------------------------------------------------------------------------------
ntest "cleanup_procedures", {}, sub {
	assertOK($::N->getProcedure($pluginName, "deleteObjects"), "procedure deleteObjects missing");
	assertOK($::N->getProcedure($pluginName, "deleteWorkspaceOrphans"), "procedure deleteWorkspaceOrphans missing");
	assertOK($::N->getProcedure($pluginName, "jobCleanup_byResult"), "procedure jobCleanup_byResult missing");
	assertOK($::N->getProcedure($pluginName, "jobsCleanup"), "procedure jobsCleanup missing");
	assertOK($::N->getProcedure($pluginName, "subJC_deleteWorkspace"), "procedure subJC_deleteWorkspace missing");
	assertOK($::N->getProcedure($pluginName, "workflowCleanup"), "procedure workflowCleanup missing");
};

#-------------------------------------------------------------------------------
# Issue #18: jobsCleanup fails with property error 
#-------------------------------------------------------------------------------
ntest "humanSize", {}, sub {
    my $xpath = $::N->runProcedure("EC-Admin", {
	procedureName=>"subJC_deleteWorkspace",
	actualParameter=>[
	    {actualParameterName=>"computeUsage", value=>0},
	    {actualParameterName=>"executeDeletion", value=>0},
	    {actualParameterName=>"linDir", value=>"/tmp"},
	    {actualParameterName=>"winDir", value=>"C:\\TEMP"},
	    {actualParameterName=>"resName", value=>"local"}
	]});
    assertOK($xpath, "Failed to launch EC-Admin::subJC_deleteWorkspace");
    if ($xpath) {
	#get new Job ID
        my $jobId  = $xpath->findvalue("//jobId");
        waitForJob($jobId);
	my $jobData  = $::N->getJobDetails($jobId);
        my $outcome = $jobData->findvalue("//job/outcome");
	assertEq("success", $outcome, "subJC_deleteWorkspace failed");
    }
};

#-------------------------------------------------------------------------------
# sub procedure to help calling jobsCleanup multiple times
#  Takes the parameters are an input
#  and return the summary and outcome
#-------------------------------------------------------------------------------
sub callJobsCleanup{
    my ($computeUsage, $executeDeletion, $jobLevel, $pattern, $jobProp, $days)=@_;

    my $xpath = $::N->runProcedure("EC-Admin", {
        procedureName=>"jobsCleanup",
        actualParameter=>[
            {actualParameterName=>"computeUsage", value=>$computeUsage},
            {actualParameterName=>"executeDeletion", value=>$executeDeletion},
            {actualParameterName=>"jobLevel", value=>$jobLevel},
            {actualParameterName=>"jobPatternMatching", value=>$pattern},
            {actualParameterName=>"jobProperty", value=>$jobProp},
            {actualParameterName=>"olderThan", value=>$days}
        ]});
    assertOK($xpath, "Failed to launch EC-Admin::jobsCleanup");
    if ($xpath) {
        #get new Job ID
        my $jobId  = $xpath->findvalue("//jobId");
        waitForJob($jobId);
        my $jobData  = $::N->getJobDetails($jobId);

        my $jsId = $jobData->findvalue("//job/jobStep[stepName='deleteJobs']/jobStepId");
        my $summary=$::N->getProperty("summary", {jobStepId=>$jsId})->findvalue("//value");
        my $outcome = $jobData->findvalue("//job/outcome");
	my $nbJobs = $::N->getProperty("numberOfJobs", {jobId => $jobId})->findvalue("//value");
	
        return($summary, $outcome, $nbJobs);
    }
    return("", "", -1);
}

#-------------------------------------------------------------------------------
#  Load some old jobs
#-------------------------------------------------------------------------------
sub loadJob {
  my $name=shift;

  my $xpath= $::N->import({file=>$::gWorkingDirectory . "/data/cleanup/$name.xml", force=>1});
  assertOK($xpath, "$name job import failed");
}


#-------------------------------------------------------------------------------
# Test job Delete
#-------------------------------------------------------------------------------
ntest "jobsCleanup", {}, sub {
    my ($summary, $outcome, $nbJobs);

    loadJob("success");
    loadJob("error");
    loadJob("warning");
    loadJob("aborted");
   
    # Report mode
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "false","All", "", "doNotDelete", 365);
    assertEq("success", $outcome, "report mode failed");
    assertEq("", $summary, "report mode should succeed");
    assertEq("4", $nbJobs, "report mode should return 4 jobs");

    # Delete mode: 1 aborted job
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "true", "Aborted", "", "doNotDelete", 365);
    assertEq("success", $outcome, "aborted test failed");
    assertEq("1 jobs deleted", $summary, "wrong number of aborted jobs deleted");

    # Delete mode: 1 error job
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "true", "Error", "", "doNotDelete", 365);
    assertEq("success", $outcome, "error test failed");
    assertEq("1 jobs deleted", $summary, "wrong number of error jobs deleted");

    # Delete mode: 2 jobs (1 success and 1 warning)
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "true", "All", "", "doNotDelete", 365);
    assertEq("success", $outcome, "error test failed");
    assertEq("2 jobs deleted", $summary, "wrong number of jobs deleted");

    # Delete mode: nothing to delete anymore
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "true", "All", "", "doNotDelete", 365);
    assertEq("success", $outcome, "error test failed");
    assertEq("0 jobs deleted", $summary, "no job to delete");

};

1;
